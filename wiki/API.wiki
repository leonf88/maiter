#summary Maiter API

= Introduction =

The following 3 components should be implemented in Maiter. They are quite easy to implement after you have figured out what the commutative operator is and what the g_{i,j}(x) function is.

 * `Sharder`
 * `IterateKernel`
 * `TermChecker`

= Details =

{{{
template <class K>
struct Sharder : public SharderBase {
  virtual int operator()(const K& k, int shards) = 0;
};

template <class K, class V, class D>
struct IterateKernel : public IterateKernelBase {
  virtual void read_data(string& line, K* k, D* data) = 0;
  virtual void init_c(const K& k, V* delta) = 0;
  virtual const V& default_v() const = 0;
  virtual void accumulate(V* a, const V& b) = 0;
  virtual void priority(V* pri, const V& value, const V& delta) = 0;
  virtual void g_func(const V& delta, const D& data, vector<pair<K, V> >* output) = 0;
};

template <class K, class V>
struct TermChecker : public TermCheckerBase {
    virtual double estimate_prog(LocalTableIterator<K, V>* table_itr) = 0;
    virtual bool terminate(vector<double> local_reports) = 0;
};
}}}